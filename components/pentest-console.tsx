"use client"

import { useEffect, useRef, useState } from "react"
import { ScrollArea } from "@/components/ui/scroll-area"
import { usePentest, type ConsoleEntry } from "@/contexts/pentest-context"
import { useConnection } from "@/contexts/connection-context"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { useWebSocket } from "@/hooks/use-websocket"

export default function PentestConsole() {
  const { target, isRunning } = usePentest()
  const { config: credentials } = useConnection()
  const [consoleEntries, setConsoleEntries] = useState<ConsoleEntry[]>([])
  const [inputValue, setInputValue] = useState("")
  const [isConnecting, setIsConnecting] = useState(false)
  const consoleRef = useRef<HTMLDivElement>(null)

  const { status, send } = useWebSocket({
    url: "ws://localhost:8080/ws/console",
    onOpen: () => {
      console.log("Console WebSocket connected")
      setIsConnecting(false)
      addConsoleEntry({
        type: "system",
        content: "Connected to console",
        timestamp: new Date().toISOString(),
      })
    },
    onClose: (event: CloseEvent) => {
      console.log("Console WebSocket closed:", event.code, event.reason)
      setIsConnecting(false)
      addConsoleEntry({
        type: "system",
        content: `Connection closed: ${event.reason || "Unknown reason"}`,
        timestamp: new Date().toISOString(),
      })
    },
    onError: (event: Event) => {
      console.error("Console WebSocket error:", event)
      setIsConnecting(false)
      addConsoleEntry({
        type: "system",
        content: "Connection error occurred",
        timestamp: new Date().toISOString(),
      })
    },
    onMessage: (event: MessageEvent) => {
      try {
        const data = JSON.parse(event.data)
        addConsoleEntry({
          type: "output",
          content: data.message || data,
          timestamp: new Date().toISOString(),
        })
      } catch (error) {
        console.error("Failed to parse WebSocket message:", error)
        addConsoleEntry({
          type: "system",
          content: "Failed to parse server message",
          timestamp: new Date().toISOString(),
        })
      }
    },
    reconnectInterval: 5000,
    reconnectAttempts: 5,
    autoConnect: false,
  })

  const addConsoleEntry = (entry: ConsoleEntry) => {
    setConsoleEntries((prev) => [...prev, entry])
  }

  useEffect(() => {
    if (consoleRef.current) {
      consoleRef.current.scrollTop = consoleRef.current.scrollHeight
    }
  }, [consoleEntries])

  useEffect(() => {
    if (credentials?.host && credentials?.username && credentials?.password) {
      setIsConnecting(true)
      addConsoleEntry({
        type: "system",
        content: "Connecting to console...",
        timestamp: new Date().toISOString(),
      })
    }
  }, [credentials])

  const sendCommand = async (command: string) => {
    if (!credentials?.host || !credentials?.username || !credentials?.password) {
      addConsoleEntry({
        type: "system",
        content: "Missing credentials",
        timestamp: new Date().toISOString(),
      })
      return
    }

    if (status !== "connected") {
      addConsoleEntry({
        type: "system",
        content: "Not connected to console",
        timestamp: new Date().toISOString(),
      })
      return
    }

    addConsoleEntry({
      type: "command",
      content: command,
      timestamp: new Date().toISOString(),
    })

    const success = send({
      type: "command",
      command,
      credentials: {
        host: credentials.host,
        username: credentials.username,
        password: credentials.password,
      },
    })

    if (!success) {
      addConsoleEntry({
        type: "system",
        content: "Failed to send command",
        timestamp: new Date().toISOString(),
      })
    }
  }

  const getEntryColor = (type: string) => {
    switch (type) {
      case "command":
        return "text-cyan-400"
      case "output":
        return "text-slate-200 dark:text-slate-300"
      case "ai":
        return "text-emerald-400"
      case "system":
        return "text-amber-400"
      default:
        return "text-slate-200 dark:text-slate-300"
    }
  }

  const getEntryPrefix = (type: string) => {
    switch (type) {
      case "command":
        return "$ "
      case "output":
        return ""
      case "ai":
        return "[AI] "
      case "system":
        return "[SYSTEM] "
      default:
        return ""
    }
  }

  const formatTimestamp = (timestamp: string) => {
    try {
      if (!isNaN(Number(timestamp))) {
        return new Date(Number(timestamp) * 1000).toLocaleTimeString()
      }
      return new Date(timestamp).toLocaleTimeString()
    } catch (e) {
      return "00:00:00"
    }
  }

  return (
    <div className="h-full flex flex-col bg-slate-900 dark:bg-slate-950">
      <div className="px-6 py-4 border-b border-slate-700/50">
        <h3 className="text-lg font-semibold text-white">Terminal Output</h3>
        <p className="text-sm text-slate-400">Real-time penetration testing console</p>
      </div>

      <ScrollArea className="flex-1 scrollbar-sleek">
        <div className="p-6 font-mono text-sm space-y-2 min-h-full">
          {consoleEntries.length === 0 && !isRunning && (
            <div className="flex items-center justify-center h-64">
              <div className="text-center">
                <div className="w-16 h-16 mx-auto mb-4 rounded-2xl bg-gradient-to-br from-indigo-500/20 to-purple-500/20 flex items-center justify-center">
                  <span className="text-2xl">âš¡</span>
                </div>
                <p className="text-slate-400 text-base font-sans">Start a pentest to see console output...</p>
              </div>
            </div>
          )}

          {consoleEntries.map((entry, index) => (
            <div key={index} className={`${getEntryColor(entry.type)} leading-relaxed`}>
              <span className="text-slate-500 text-xs mr-3">{formatTimestamp(entry.timestamp)}</span>
              <span className="font-bold">{getEntryPrefix(entry.type)}</span>
              <span className="break-words">{entry.content}</span>
            </div>
          ))}
          <div ref={consoleRef} />
        </div>
      </ScrollArea>

      <div className="p-4 border-t border-slate-700/50">
        <div className="flex items-center space-x-2">
          <Input
            placeholder="Enter command..."
            className="flex-1 bg-slate-800 border-slate-700 text-white"
            onKeyPress={(e) => {
              if (e.key === 'Enter') {
                const command = e.currentTarget.value
                if (command) {
                  sendCommand(command)
                  e.currentTarget.value = ''
                }
              }
            }}
          />
          <Button
            onClick={() => {
              const input = document.querySelector('input[placeholder="Enter command..."]') as HTMLInputElement
              const command = input.value
              if (command) {
                sendCommand(command)
                input.value = ''
              }
            }}
            className="bg-blue-500 hover:bg-blue-600 text-white"
          >
            Send
          </Button>
        </div>
      </div>
    </div>
  )
}

