"use client"

import { useEffect, useRef } from "react"
import { ScrollArea } from "@/components/ui/scroll-area"
import { usePentest } from "@/contexts/pentest-context"

export default function PentestConsole() {
  const { consoleEntries, isRunning } = usePentest()
  const scrollRef = useRef<HTMLDivElement>(null)

  // Auto-scroll to bottom when new entries appear
  useEffect(() => {
    if (scrollRef.current) {
      scrollRef.current.scrollIntoView({ behavior: "smooth" })
    }
  }, [consoleEntries])

  const getEntryColor = (type: string) => {
    switch (type) {
      case "command":
        return "text-cyan-400"
      case "output":
        return "text-slate-200 dark:text-slate-300"
      case "ai":
        return "text-emerald-400"
      case "system":
        return "text-amber-400"
      default:
        return "text-slate-200 dark:text-slate-300"
    }
  }

  const getEntryPrefix = (type: string) => {
    switch (type) {
      case "command":
        return "$ "
      case "output":
        return ""
      case "ai":
        return "[AI] "
      case "system":
        return "[SYSTEM] "
      default:
        return ""
    }
  }

  const formatTimestamp = (timestamp: string) => {
    try {
      // If timestamp is a number (Unix timestamp)
      if (!isNaN(Number(timestamp))) {
        return new Date(Number(timestamp) * 1000).toLocaleTimeString()
      }
      // If timestamp is an ISO string
      return new Date(timestamp).toLocaleTimeString()
    } catch (e) {
      return "00:00:00"
    }
  }

  return (
    <div className="h-full flex flex-col bg-slate-900 dark:bg-slate-950">
      <div className="px-6 py-4 border-b border-slate-700/50">
        <h3 className="text-lg font-semibold text-white">Terminal Output</h3>
        <p className="text-sm text-slate-400">Real-time penetration testing console</p>
      </div>

      <ScrollArea className="flex-1 scrollbar-sleek">
        <div className="p-6 font-mono text-sm space-y-2 min-h-full">
          {consoleEntries.length === 0 && !isRunning && (
            <div className="flex items-center justify-center h-64">
              <div className="text-center">
                <div className="w-16 h-16 mx-auto mb-4 rounded-2xl bg-gradient-to-br from-indigo-500/20 to-purple-500/20 flex items-center justify-center">
                  <span className="text-2xl">âš¡</span>
                </div>
                <p className="text-slate-400 text-base font-sans">Start a pentest to see console output...</p>
              </div>
            </div>
          )}

          {consoleEntries.map((entry, index) => (
            <div key={index} className={`${getEntryColor(entry.type)} leading-relaxed`}>
              <span className="text-slate-500 text-xs mr-3">{formatTimestamp(entry.timestamp)}</span>
              <span className="font-bold">{getEntryPrefix(entry.type)}</span>
              <span className="break-words">{entry.content}</span>
            </div>
          ))}
          <div ref={scrollRef} />
        </div>
      </ScrollArea>
    </div>
  )
}
